{"meta":{"title":"小卢同学的博客","subtitle":"一个正在努力的前端小白","description":null,"author":"小卢同学","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"基于hexo和github搭建的博客（进阶）","slug":"hexo进阶","date":"2018-06-11T01:25:11.000Z","updated":"2018-06-11T07:53:18.543Z","comments":true,"path":"2018/06/11/hexo进阶/","link":"","permalink":"http://yoursite.com/2018/06/11/hexo进阶/","excerpt":"本文参考自：https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html （转载请标明出处","text":"本文参考自：https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html （转载请标明出处 1.修改主题​ 既然默认主题很丑，那我们别的不做，首先来替换一个好看点的主题。这是 官方主题 ​ 个人比较喜欢的2个主题：hexo-theme-jekyll 和 hexo-theme-yilia。 ​ 首先下载这个主题：(这里我使用的是hexo-theme-yilia) 12$ cd /d/blog$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 修改_config.yml中的theme: landscape改为theme: yilia，然后重新执行hexo g来重新生成。 如果出现一些莫名其妙的问题，可以先执行hexo clean来清理一下public的内容，然后再来重新生成和发布。 2.上传之前​ 在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。 3.上传到github​ 如果你一切都配置好了，发布上传很容易，一句hexo d就搞定，当然关键还是你要把所有东西配置好。 ​ 首先，ssh key肯定要配置好。 ​ 其次，配置_config.yml中有关deploy的部分： ​ （上文中有提到，但是还是怕大家有小问题，这里特别注意一下） ​ 正确写法： 1234deploy: type: git repository: git@github.com:lujiuxiang/lujiuxiang.github.io.git branch: master ​ 错误写法： 1234deploy: type: github repository: https://github.com/lujiuxiang/lujiuxiang.github.io.git branch: master 后面一种写法是hexo2.x的写法，现在已经不行了，无论是哪种写法，此时直接执行hexo d的话一般会报如下错误： 1Deployer not found: github 或者 Deployer not found: git 原因是还需要安装一个插件： 1npm install hexo-deployer-git --save 其它命令不确定，部署这个命令一定要用git bash，否则会提示Permission denied (publickey). 打开你的git bash，输入hexo d就会将本次有改动的代码全部提交，没有改动的不会： 4.常见的hexo命令常见命令： 1234567hexo new \"postName\" #新建文章hexo new page \"pageName\" #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 缩写： 1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 组合命令： 12hexo s -g #生成并本地预览hexo d -g #生成并上传 5. _config.yml这里面都是一些全局配置，每个参数的意思都比较简单明了，所以就不作详细介绍了。 需要特别注意的地方是，冒号后面必须有一个空格，否则可能会出问题。 6. 写博客定位到我们的blog根目录，执行命令： 1hexo new 'my-first-blog' hexo会帮我们在_posts下生成相关md文件： 我们只需要打开这个文件就可以开始写博客了，默认生成如下内容： 那么hexo new page &#39;postName&#39;命令和hexo new &#39;postName&#39;有什么区别呢？ 1hexo new page \"my-second-blog\" 最终部署时生成：hexo\\public\\my-second-blog\\index.html，但是它不会作为文章出现在博文目录。 7. 工具这里我推荐大家用一款非常不错的软件：trpora 功能很强大! 8. 如何让博文列表不显示全部内容默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？ 答案是在合适的位置加上&lt;!--more--&gt;即可，例如： 12345678910111213# 前言使用github pages服务搭建博客的好处有：1. 全是静态文件，访问速度快；2. 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；3. 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；&lt;!--more--&gt;4. 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；5. 博客内容可以轻松打包、转移、发布到其它平台；6. 等等； 最终效果： 9. 最终效果可以访问我的git博客来查看效果： https://lujiuxiang.github.io/ 10.参考http://www.cnblogs.com/zhcncn/p/4097881.html http://www.jianshu.com/p/05289a4bc8b2 【转载文章务必保留出处和署名，谢谢！】 (function (d, s) { var j, e = d.getElementsByTagName(s)[0]; if (typeof LivereTower === &apos;function&apos;) { return; } j = d.createElement(s); j.src = &apos;https://cdn-city.livere.com/js/embed.dist.js&apos;; j.async = true; e.parentNode.insertBefore(j, e); })(document, &apos;script&apos;); 为正常使用来必力评论功能请激活JavaScript","categories":[],"tags":[]},{"title":"基于Hexo和github搭建的博客","slug":"基于hexo和github搭建博客","date":"2018-06-10T10:29:08.000Z","updated":"2018-06-11T07:14:07.416Z","comments":true,"path":"2018/06/10/基于hexo和github搭建博客/","link":"","permalink":"http://yoursite.com/2018/06/10/基于hexo和github搭建博客/","excerpt":"前言：电脑系统为window 10专业版，64位本文参考自：https://www.cnblogs.com/fengxiongZz/p/7707219.html （转载请标明出处，谢谢）","text":"前言：电脑系统为window 10专业版，64位本文参考自：https://www.cnblogs.com/fengxiongZz/p/7707219.html （转载请标明出处，谢谢） 开始步骤： 1.安装Node.js和搭配好Node.js环境，打开cmd命令窗口，成功界面为下图 2.安装Git和哦诶只好Git环境（安装成功后，在电脑的任意文件夹下空白区域右键出现下图） 注意：一般出于安全考虑，只有在Git Bash Here中才能进行Git的相关操作。如果需要在cmd命令行里调用Git，那么就要配置电脑的环境变量Path，或者在安装的时候选择use Git from the Windows Command Prompt。这个可有可无，影响不大，成功配置的界面如图 3.Github账户注册和新建项目，项目必须要遵守格式：账户名.github.io 并且需要勾选Initialize this repository with a README 在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，你将会惊奇的发现该项目已经被部署到网络上，能够通过外网来访问它。 4.开始我们的 Hexo 的安装，在自己认为合适的地方创个文件夹，我是在D盘建了一个blog文件夹。然后通过命令行进入到该文件夹里面 接着输入npm install hexo -g，开始安装Hexo 安装完成后输入hexo -v，检查是否安装成功 接着输入hexo init，初始化此文件夹 看到后面的“Start blogging with Hexo！”就代表已经安装成功了！ 然后我们接着输入npm install，安装所需要的组件 输入hexo g，首次体验Hexo 并 输入hexo s，开启服务器，访问该网址，正式体验Hexo 那么出现如下图就成功了 ps：假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl+c停止服务器，接着输入“hexo server -p 端口号”来改变端口号 5.将Hexo与Github page联系起来，设置Git的user name和email（如果是第一次的话）。在其文件夹里面鼠标右键，点击Git Base Here。这里“lujiuxiang”可以替换成自己的用户名，邮箱可以替换成自己的邮箱 接着输入cd ~/.ssh，检查是否有.ssh的文件夹 输入ls，列出该文件下的内容。下图说明存在 输入ssh-keygen -t rsa -C 1173284559@qq.com”，连续三个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\\Users\\Administrator.ssh）。 输入eval “$(ssh-agent -s)”，添加密钥到ssh-agent 再输入ssh-add ~/.ssh/id_rsa，添加生成的SSH key到ssh-agent 登录Github，点击头像下的settings，添加ssh 新建一个new ssh key，将id_rsa.pub文件里的内容复制上去 输入ssh -T git@github.com，测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了 问题：假如ssh-key配置失败，那么只要以下步骤就能完全解决首先，清除所有的key-pairssh-add -Drm -r ~/.ssh删除你在github中的public-key 重新生成ssh密钥对ssh-keygen -t rsa -C “xxx@xxx.com“ 接下来正常操作在github上添加公钥public-key:1、首先在你的终端运行 xclip -sel c ~/.ssh/id_rsa.pub将公钥内容复制到剪切板2、在github上添加公钥时，直接复制即可3、保存 测试：在终端 ssh -T git@github.com 6、配置Deployment，在其文件夹中，找到_config.yml文件，修改repo值（在末尾） repo值是你在github项目里的ssh（右下角） 7、新建一篇博客，在cmd执行命令：hexo new post “博客名” 这时候在文件夹_posts目录下将会看到已经创建的文件 在生成以及部署文章之前，需要安装一个扩展：npm install hexo-deployer-git –save 使用编辑器编好文章，那么就可以使用命令：hexo d -g，生成以及部署了 部署成功后访问你的地址：http://用户名.github.io。那么将看到生成的文章 好了，最基本的也是最全面的hexo+github搭建博客完结啦！。","categories":[],"tags":[]}]}